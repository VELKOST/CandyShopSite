const [allProducts, setAllProducts] = useState<Product[]>([]);
```»

---

**Шаг за шагом разберём, что тут происходит:**

1. **useState**
   - `useState` — это React-хук, который позволяет добавлять состояние (state) в функциональные компоненты.
   - Объявляется в виде: `const [stateValue, setStateValue] = useState(initialValue);`

2. **Что такое `<Product[]>`**
   - В данном случае используется TypeScript-генерик (`<Product[]>`) для указания типа состояния.
   - `<Product[]>` говорит: «Я ожидаю, что значение состояния (state) будет массивом, где каждый элемент соответствует интерфейсу или типу `Product`».
   - Таким образом, `allProducts` строго будет массивом объектов типа `Product`.

3. **Что принимает `useState`?**
   - На вход `useState` принимает **начальное значение** состояния.
   - В вашем примере это `[]` — пустой массив (изначально у нас нет ни одного товара).

4. **Почему именно такие скобки?**
   - `const [allProducts, setAllProducts] = ...`:
     - Квадратные скобки `[ ]` здесь — это **деструктуризация массива**.
     - `useState` возвращает **пару** (массив из двух элементов):
       1. **текущее значение** состояния (здесь — `allProducts`),
       2. **функция для обновления** этого состояния (здесь — `setAllProducts`).
   - `<Product[]>`:
     - **Угловые скобки** (`<>`) в TypeScript для **указания типа**.
     - Здесь это **дженерик**, который уточняет, что состояние — это массив объектов типа `Product`.
   - Обычные круглые скобки `( )` после `useState<Product[]>()` — это **вызов функции**. Аргумент этой функции — `[]` (пустой массив).

5. **Итоговая структура**
   ```jsx
   const [allProducts, setAllProducts] = useState<Product[]>([]);
